pipeline {

    // default agent will not be set at global level
    agent none

    tools {
        // tool `maven-3.6.1` needs to be defined in Manage Jenkins -> Global tools -> Maven
        maven 'maven-3.6.1'
        jdk 'JDK-1.8.0_212'
    }

    parameters {
        // parallel integration (on node labeled `master-label`)
        string(name: 'ROOT_PATH', defaultValue: 'exercise-03-rest-api-crud/app-rest-api', description: 'Project root path in workspace')
    }

    stages {
        stage('Manual Stage (flyweight stage)') {
            agent any
            // * `flyweight executor` - DO NOT limits available executors - running as separate thread
            input message: 'Start?',
                    ok: 'Yes.',
                    concurrency: 1
        }

        // Override target agent for next stages
        agent {
            label 'master-label'
        }

        stage('Clone') {
            try {
                git 'https://github.com/pduleba/Docker-SL.git'
            } catch (all) {
                println("Unable to download sources from GitHUB")
                currentBuild.result = 'FAILURE'
                throw all
            }
        }

        stage('Clean/Test') {
            dir(params.ROOT_PATH) {
                sh label: '', script: "mvn clean test"
            }
        }

        stage('Install') {
            dir(params.ROOT_PATH) {
                sh label: '', script: "mvn install -Dmaven.test.skip=true"
            }
        }

        // save data in this node (to be passed between nodes)
        stage('Stash') {
            dir(params.ROOT_PATH) {
                stash name: 'archive-package',
                        includes: 'target/*.jar'
            }
        }

        // Override target agent for next stages
        agent any

        // parallel integration (ANY NODE - no node specified)
        stage('Parallel Stage') {
            failFast true
            parallel {
                stage('Thread1:') {
                    steps {
                        executeCommand('Thread-1', 'whoami')
                    }
                }
                stage('Thread2:') {
                    steps {
                        executeCommand('Thread-2', 'whoami')
                    }
                }
                stage('Thread3:') {
                    steps {
                        executeCommand('Thread-3', 'whoami')
                    }
                }
            }
        }
    }
}



//// forward further execution to node labeled `windows-label`
//node('windows-label') {
//
//    stage('Unstash') {
//        // clean up old data
//        sh 'rm -rf *'
//        // load data passed between nodes (can be the same node as source)
//        unstash 'archive-package'
//    }
//
//    stage('Archive') {
//        archiveArtifacts 'target/*.jar'
//    }
//}
//
//node {
//    stage('Manual Stage (heavyweight stage)') {
//        // * `heavyweight executor` - limits available executors
//        input message: 'Finish?',
//                ok: 'Yes.',
//                concurrency: 1
//        sh 'echo "Heavyweight Stage - COMPLETE"'
//    }
//}

def executeCommand(executionName, command) {
    // ANY NODE available
    node {
        sh "echo ${executionName}"
        sh command
    }
}
