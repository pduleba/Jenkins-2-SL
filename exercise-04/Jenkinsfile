pipeline {

    //-----------------------------------------
    // Declarative Pipeline Syntax Reference :: https://jenkins.io/doc/book/pipeline/syntax/#declarative-pipeline
    // Declarative Pipeline Steps Reference  :: https://jenkins.io/doc/pipeline/steps/
    //-----------------------------------------

    // default agent will not be set at global level
    agent none

    parameters {
        // parallel integration (on node labeled `master-label`)
        string(name: 'ROOT_PATH', defaultValue: 'exercise-03-rest-api-crud/app-rest-api', description: 'Project root path in workspace')
    }

    options {
        disableConcurrentBuilds()
        parallelsAlwaysFailFast()
    }

    tools {
        // tool `JDK-1.8.0_212` needs to be defined in Manage Jenkins -> Global tools -> JDK
        jdk 'JDK-1.8.0_212'
        // tool `maven-3.6.1` needs to be defined in Manage Jenkins -> Global tools -> Maven
        maven 'maven-3.6.1'
    }

    stages {
        stage('Start?') {
            input {
                message "Start?"
                ok "Yes."
            }
            steps {
                echo "Approved"
            }
        }

        stage('Clone') {
            agent {
                label 'master-label'
            }
            steps {
                git 'https://github.com/pduleba/Docker-SL.git'
            }
        }

        stage('Clean/Test') {
            agent {
                label 'master-label'
            }
            steps {
                dir(params.ROOT_PATH) {
                    sh 'mvn clean test'
                }
            }
        }

        stage('Install') {
            agent {
                label 'master-label'
            }
            steps {
                dir(params.ROOT_PATH) {
                    sh 'mvn install -Dmaven.test.skip=true'
                }
            }
        }

        // save data in this node (to be passed between nodes)
        stage('Stash') {
            agent {
                label 'master-label'
            }
            steps {
                dir(params.ROOT_PATH) {
                    stash name: 'archive-package', includes: 'target/*.jar'
                }
            }
        }

        // parallel integration (ANY NODE - no node specified)
        stage('Parallel Stage') {
            failFast true
            parallel {
                stage('Thread1:') {
                    steps {
                        executeCommand('whoami')
                    }
                }
                stage('Thread2:') {
                    steps {
                        executeCommand('whoami')
                    }
                }
                stage('Thread3:') {
                    steps {
                        executeCommand('whoami')
                    }
                }
            }
        }

        stage('Unstash') {
            agent {
                label 'slave-label'
            }
            steps {
                // clean up old data
                sh 'rm -rf *'
                // load data passed between nodes (can be the same node as source)
                unstash 'archive-package'
            }
        }

        stage('Archive') {
            agent {
                label 'slave-label'
            }
            steps {
                archiveArtifacts 'target/*.jar'
            }
        }

        stage('Finish?') {
            input {
                message "Finish?"
                ok "Yes."
            }
            steps {
                echo "Approved"
            }
        }
    }
}

def executeCommand(command) {
    // Attempted to execute a step that requires a node context while ‘agent none’ was specified.
    // Be sure to specify your own ‘node { ... }’ blocks when using ‘agent none’.
    node {
        sh command
    }
}
